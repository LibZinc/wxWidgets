
 # ***** BEGIN LICENSE BLOCK *****
 # Version: MPL 1.1/GPL 2.0/LGPL 2.1
 #
 # The contents of this file are subject to the Mozilla Public License Version
 # 1.1 (the "License"); you may not use this file except in compliance with
 # the License. You may obtain a copy of the License at
 # http://www.mozilla.org/MPL/
 #
 # Software distributed under the License is distributed on an "AS IS" basis,
 # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 # for the specific language governing rights and limitations under the
 # License.
 #
 # The Original Code is cmgui
 #
 # The Initial Developer of the Original Code is
 # Auckland Uniservices Ltd, Auckland, New Zealand.
 # Portions created by the Initial Developer are Copyright (C) 2005
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s): 
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK ***** */

# Set the minimum version of cmake required to 2.6
CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( wxWidgets )

SET( WXWIDGETS_MAJOR_VERSION "2" )
SET( WXWIDGETS_MINOR_VERSION "8" )
SET( WXWIDGETS_PATCH_VERSION "10" )

# Set up build options
IF( NOT DEFINED WXWIDGETS_BUILD_TYPE )
	SET( WXWIDGETS_BUILD_TYPE "Release" )
ENDIF( NOT DEFINED WXWIDGETS_BUILD_TYPE )

IF( NOT DEFINED WXWIDGETS_INSTALL_PREFIX )
	IF(WIN32)
		SET( WXWIDGETS_INSTALL_PREFIX c:/wxWidgets-${WXWIDGETS_MAJOR_VERSION}.${WXWIDGETS_MINOR_VERSION}.${WXWIDGETS_PATCH_VERSION} )
	ELSE(WIN32)
		SET( WXWIDGETS_INSTALL_PREFIX /usr/local )
	ENDIF(WIN32)
ENDIF( NOT DEFINED WXWIDGETS_INSTALL_PREFIX )

SET( LIBRARY_TYPE_STRING "STATIC" )
IF( DEFINED WXWIDGETS_LIBRARY_TYPE )
	SET( LIBRARY_TYPE_STRING ${WXWIDGETS_LIBRARY_TYPE} )
ENDIF( DEFINED WXWIDGETS_LIBRARY_TYPE )
SET( WXWIDGETS_LIBRARY_TYPE ${LIBRARY_TYPE_STRING} CACHE STRING "What type of library is required [SHARED | STATIC | MODULE ]" )

SET( WXWIDGETS_BUILD_TYPE ${WXWIDGETS_BUILD_TYPE} CACHE STRING "What configuration do you want to build: Debug, Release, MinSizeRel, RelWithDebugInfo" )
SET( CMAKE_BUILD_TYPE ${WXWIDGETS_BUILD_TYPE} CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE, manipulate via WXWIDGETS_BUILD_TYPE" FORCE )
SET( WXWIDGETS_INSTALL_PREFIX ${WXWIDGETS_INSTALL_PREFIX} CACHE PATH "Where are your Cmgui dependent libraries installed?" )
SET( CMAKE_INSTALL_PREFIX ${WXWIDGETS_INSTALL_PREFIX} CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX, manipulate via WXWIDGETS_INSTALL_PREFIX" FORCE )

MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )
	
	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

OPTION_WITH_DEFAULT( WXWIDGETS_USE_PCH "Build wx using precompiled headers?" TRUE )
OPTION_WITH_DEFAULT( WXWIDGETS_UNIVERSAL "Build universal instead of native port?" FALSE )
OPTION_WITH_DEFAULT( WXWIDGETS_UNICODE "Build unicode verson of wxWidgets?" FALSE )
IF( WXWIDGETS_UNICODE )
	OPTION_WITH_DEFAULT( WXWIDGETS_MSLU "Build MSLU library when building unicode version?" FALSE )
ENDIF( WXWIDGETS_UNICODE )
OPTION_WITH_DEFAULT( WXWIDGETS_MONOLITHIC "Build single huge monolithic one" FALSE )
OPTION_WITH_DEFAULT( WXWIDGETS_USE_EXCEPTIONS "Enable exceptions in compiled code." TRUE )
OPTION_WITH_DEFAULT( WXWIDGETS_USE_RTTI "Enable run-time type information (RTTI) in compiled code." FALSE )
OPTION_WITH_DEFAULT( WXWIDGETS_USE_THREADS "Enable threading in compiled code." TRUE )
OPTION_WITH_DEFAULT( WXWIDGETS_USE_GDIPLUS "Link with gdiplus.lib?" FALSE )
OPTION_WITH_DEFAULT( WXWIDGETS_OFFICIAL_BUILD "Is this official build by wxWidgets developers?" FALSE )

OPTION_WITH_DEFAULT( WXWIDGETS_USE_GUI "Build GUI libraries" TRUE )
IF( WXWIDGETS_USE_GUI )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_HTML "Build wxHTML library" TRUE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_MEDIA "Build multimedia library" FALSE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_XRC "Build wxXRC library" TRUE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_AUI "Build wxAUI library" FALSE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_RICHTEXT "Build wxRichTextCtrl library" FALSE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_OPENGL "Build OpenGL canvas library" TRUE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_ODBC "Build ODBC database classes" FALSE )
	OPTION_WITH_DEFAULT( WXWIDGETS_USE_QA "Build quality assurance classes library" FALSE )
ENDIF( WXWIDGETS_USE_GUI )

IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL STATIC )
	# set option for msw dynamic or static
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL STATIC )

IF( ${WXWIDGETS_BUILD_TYPE} MATCHES "[Dd]ebug" )
ELSE( ${WXWIDGETS_BUILD_TYPE} MATCHES "[Dd]ebug" )
ENDIF( ${WXWIDGETS_BUILD_TYPE} MATCHES "[Dd]ebug" )

# Find zlib;png;tiff;jpeg
# I only need zlib
FIND_PACKAGE( ZLIB REQUIRED )
INCLUDE_DIRECTORIES( ${ZLIB_INCLUDE_DIR} )

SET( INSTALL_LIBRARY_TYPE "ARCHIVE" )
IF( ${WXWIDGETS_LIBRARY_TYPE} MATCHES "SHARED" )
	SET( INSTALL_LIBRARY_TYPE "LIBRARY" )
ELSEIF( ${WXWIDGETS_LIBRARY_TYPE} MATCHES "MODULE" )
	SET( INSTALL_LIBRARY_TYPE "LIBRARY" )
ENDIF( ${WXWIDGETS_LIBRARY_TYPE} MATCHES "SHARED" )

# Configure header settings
SET( wxUSE_RICHTEXT ${WXWIDGETS_USE_RICHTEXT} )
SET( wxUSE_GLCANVAS ${WXWIDGETS_USE_OPENGL} )
SET( wxUSE_HTML ${WXWIDGETS_USE_HTML} )
SET( wxUSE_AUI ${WXWIDGETS_USE_AUI} )
SET( wxUSE_ODBC ${WXWIDGETS_USE_ODBC} )
SET( wxUSE_XRC ${WXWIDGETS_USE_XRC} )
SET( wxUSE_MEDIACTRL ${WXWIDGETS_USE_MEDIA} )
SET( wxUSE_THREADS ${WXWIDGETS_USE_THREADS} )
SET( wxUSE_EXCEPTIONS ${WXWIDGETS_USE_EXCEPTIONS} )
SET( wxUSE_REGEX TRUE )
SET( wxUSE_EXPAT TRUE )
SET( wxUSE_DYNAMIC_LOADER TRUE )
SET( wxUSE_GRID FALSE )
SET( wxUSE_IMAGE TRUE )
SET( wxUSE_DRAGIMAGE ${wxUSE_IMAGE} )
SET( wxUSE_TOOLBAR ${wxUSE_IMAGE} )
SET( wxUSE_TOOLBAR_NATIVE ${wxUSE_TOOLBAR} )
SET( wxUSE_TOOLBOOK ${wxUSE_IMAGE} )
SET( wxUSE_TGA ${wxUSE_IMAGE} )
SET( wxUSE_GIF ${wxUSE_IMAGE} )
SET( wxUSE_PNM ${wxUSE_IMAGE} )
SET( wxUSE_PCX ${wxUSE_IMAGE} )
SET( wxUSE_IFF FALSE )
SET( wxUSE_XPM ${wxUSE_IMAGE} )
SET( wxUSE_LIBPNG FALSE )
SET( wxUSE_LIBJPEG FALSE )
SET( wxUSE_LIBTIFF FALSE )
IF( WXWIDGETS_UNIVERSAL )
	# Configure universal specific stuff
ELSE( WXWIDGETS_UNIVERSAL )
	# Configure other specific stuff
ENDIF( WXWIDGETS_UNIVERSAL )

# Configure setup header file
SET( SETUP_HDR ${PROJECT_SOURCE_DIR}/include/wx/setup.h.cmake )
SET( CONFIGURED_SETUP_HDR ${PROJECT_BINARY_DIR}/include/wx/setup.h )
CONFIGURE_FILE( ${SETUP_HDR} ${CONFIGURED_SETUP_HDR} )
SOURCE_GROUP( "Setup Headers" FILES ${CONFIGURED_SETUP_HDR} )

INCLUDE_DIRECTORIES( ${PROJECT_BINARY_DIR}/include )
INCLUDE_DIRECTORIES( include )
INCLUDE_DIRECTORIES( include/msw )
INCLUDE_DIRECTORIES( src/expat/lib )
INCLUDE_DIRECTORIES( src/regex )

SET( EXPAT_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} )
SET( EXPAT_BUILD_TYPE ${CMAKE_BUILD_TYPE} )
ADD_SUBDIRECTORY( src/expat )
SET( REGEX_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} )
SET( REGEX_BUILD_TYPE ${CMAKE_BUILD_TYPE} )
ADD_SUBDIRECTORY( src/regex )
SET( WXRC_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} )
SET( WXRC_BUILD_TYPE ${CMAKE_BUILD_TYPE} )
ADD_SUBDIRECTORY( utils/wxrc )

IF( WIN32 )
	SET( WXWIDGETS_PORT_NAME msw )
	ADD_DEFINITIONS( -D__WXMSW__ -D_LIB )
	SET( DEFINITIONS_DEBUG __WXDEBUG__ _CRTDBG_MAP_ALLOC )
ELSE( WIN32 )
	SET( WXWIDGETS_PORT_NAME gtk )
ENDIF( WIN32 )

# Pre-compiled header setup
MACRO( SET_PRECOMPILED_HEADER PRECOMPILED_SRC )
	SET( SOURCE_FILES ${ARGN} )
	# C files don't work with precompiled headers
	SET( C_FILES src/common/extended.c )
	LIST(REMOVE_ITEM SOURCE_FILES ${PRECOMPILED_SRC} ${C_FILES} )
	IF( WIN32 )
		SET_SOURCE_FILES_PROPERTIES( ${PRECOMPILED_SRC} PROPERTIES
			COMPILE_FLAGS "/Ycwx/wxprec.h" )
		SET_SOURCE_FILES_PROPERTIES( ${SOURCE_FILES}
			PROPERTIES COMPILE_FLAGS "/Yuwx/wxprec.h"
			OBJECT_DEPENDS ${PRECOMPILED_SRC} )
	ENDIF( WIN32 )
ENDMACRO( SET_PRECOMPILED_HEADER LIB_NAME SOURCE_FILES )

# Precompiled header source file
SET( PRECOMPILED_SRC src/common/dummy.cpp )

# core <- is this the core gui lib??
SET( wxcore_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_core )
INCLUDE( files_core.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${CORE_COMMON_SRCS} ${CORE_MSW_SRCS} ${CORE_GENERIC_SRCS} ${CORE_UNIVERSAL_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM CORE_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxcore_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${CORE_COMMON_SRCS} ${CORE_MSW_SRCS} ${CORE_GENERIC_SRCS} ${CORE_UNIVERSAL_SRCS} ${wxHTML_HDRS}
	${CORE_COMMON_HDRS} ${CORE_MSW_HDRS} ${CORE_GENERIC_HDRS} ${CORE_UNIVERSAL_HDRS} ${CONFIGURED_SETUP_HDR} )
INSTALL( TARGETS ${wxcore_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
# Strip out header directory to get install location!!
FOREACH( INSTALL_HDR ${CORE_COMMON_HDRS} ${CORE_MSW_HDRS} ${CORE_GENERIC_HDRS} ${CORE_UNIVERSAL_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${CORE_COMMON_HDRS} ${CORE_MSW_HDRS} ${CORE_GENERIC_HDRS} ${CORE_UNIVERSAL_HDRS} )
SET_TARGET_PROPERTIES( ${wxcore_TARGET} PROPERTIES PROJECT_LABEL core
	COMPILE_DEFINITIONS "wxUSE_BASE=0"
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_core )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxcore_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# base
SET( wxbase_TARGET wxbase${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION} )
INCLUDE( files_base.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${BASE_COMMON_SRCS} ${BASE_MSW_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM BASE_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxbase_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${BASE_COMMON_SRCS} ${BASE_MSW_SRCS} ${BASE_HTML_HDRS}
	${BASE_COMMON_HDRS} ${BASE_MSW_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxbase_TARGET} PROPERTIES PROJECT_LABEL base
	COMPILE_DEFINITIONS "wxUSE_GUI=0;wxUSE_BASE=1"
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wxbase${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d )
TARGET_LINK_LIBRARIES( ${wxbase_TARGET} ${ZLIB_LIBRARIES} )
INSTALL( TARGETS ${wxbase_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${BASE_COMMON_HDRS} ${BASE_MSW_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${BASE_COMMON_HDRS} ${BASE_MSW_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxbase_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# xml
SET( wxxml_TARGET wxbase${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_xml )
INCLUDE( files_xml.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${XML_COMMON_SRCS} ${XML_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM XML_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxxml_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${XML_COMMON_SRCS} ${XML_SRCS}
	${XML_COMMON_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxxml_TARGET} PROPERTIES PROJECT_LABEL xml
	COMPILE_DEFINITIONS "wxUSE_GUI=0"
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wxbase${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_xml )
INSTALL( TARGETS ${wxxml_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${XML_COMMON_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${XML_COMMON_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxxml_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# gl
SET( wxgl_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_gl )
INCLUDE( files_gl.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${GL_COMMON_SRCS} ${GL_MSW_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM GL_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxgl_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${GL_COMMON_SRCS} ${GL_MSW_SRCS}
	${GL_COMMON_HDRS} ${GL_MSW_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxgl_TARGET} PROPERTIES PROJECT_LABEL gl
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_gl )
INSTALL( TARGETS ${wxgl_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${GL_COMMON_HDRS} ${GL_MSW_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${GL_COMMON_HDRS} ${GL_MSW_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxgl_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# html
SET( wxhtml_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_html )
INCLUDE( files_html.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${HTML_COMMON_SRCS} ${HTML_MSW_SRCS} ${HTML_GENERIC_SRCS} ${wxHTML_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM HTML_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxhtml_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${HTML_COMMON_SRCS} ${HTML_MSW_SRCS} ${HTML_GENERIC_SRCS} ${wxHTML_SRCS}
	${HTML_COMMON_HDRS} ${HTML_MSW_HDRS} ${HTML_GENERIC_HDRS} ${wxHTML_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxhtml_TARGET} PROPERTIES PROJECT_LABEL html
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_html )
INSTALL( TARGETS ${wxhtml_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${HTML_COMMON_HDRS} ${HTML_MSW_HDRS} ${HTML_GENERIC_HDRS} ${wxHTML_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${HTML_COMMON_HDRS} ${HTML_MSW_HDRS} ${HTML_GENERIC_HDRS} ${wxHTML_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxhtml_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# adv
SET( wxadv_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_adv )
INCLUDE( files_adv.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${ADV_COMMON_SRCS} ${ADV_MSW_SRCS} ${ADV_GENERIC_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM ADV_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxadv_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${ADV_COMMON_SRCS} ${ADV_MSW_SRCS} ${ADV_GENERIC_SRCS}
	${ADV_COMMON_HDRS} ${ADV_MSW_HDRS} ${ADV_GENERIC_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxadv_TARGET} PROPERTIES PROJECT_LABEL adv
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_adv )
INSTALL( TARGETS ${wxadv_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${ADV_COMMON_HDRS} ${ADV_MSW_HDRS} ${ADV_GENERIC_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${ADV_COMMON_HDRS} ${ADV_MSW_HDRS} ${ADV_GENERIC_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxadv_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# xrc
SET( wxxrc_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_xrc )
INCLUDE( files_xrc.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${XRC_COMMON_SRCS} ${XRC_MSW_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM XRC_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxxrc_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${XRC_COMMON_SRCS} ${XRC_MSW_SRCS} 
	${XRC_COMMON_HDRS} ${XRC_MSW_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxxrc_TARGET} PROPERTIES PROJECT_LABEL xrc
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_xrc )
INSTALL( TARGETS ${wxxrc_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${XRC_COMMON_HDRS} ${XRC_MSW_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${XRC_COMMON_HDRS} ${XRC_MSW_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxxrc_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

# aui
SET( wxaui_TARGET wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}_aui )
INCLUDE( files_aui.cmake )
IF( WXWIDGETS_USE_PCH )
	SET_PRECOMPILED_HEADER( ${PRECOMPILED_SRC} ${AUI_COMMON_SRCS} ${AUI_MSW_SRCS} )
ELSE( WXWIDGETS_USE_PCH )
	LIST(REMOVE_ITEM XRC_COMMON_SRCS ${PRECOMPILED_SRC} )
ENDIF( WXWIDGETS_USE_PCH )
ADD_LIBRARY( ${wxaui_TARGET} ${WXWIDGETS_LIBRARY_TYPE}
	${AUI_COMMON_SRCS} ${AUI_MSW_SRCS} 
	${AUI_COMMON_HDRS} ${AUI_MSW_HDRS} ${CONFIGURED_SETUP_HDR} )
SET_TARGET_PROPERTIES( ${wxaui_TARGET} PROPERTIES PROJECT_LABEL aui
	COMPILE_DEFINITIONS_DEBUG "${DEFINITIONS_DEBUG}"
	OUTPUT_NAME_DEBUG wx${WXWIDGETS_PORT_NAME}${WXWIDGETS_MAJOR_VERSION}${WXWIDGETS_MINOR_VERSION}d_aui )
INSTALL( TARGETS ${wxaui_TARGET} EXPORT wxWidgets-targets ${INSTALL_LIBRARY_TYPE}
	DESTINATION lib )
FOREACH( INSTALL_HDR ${AUI_COMMON_HDRS} ${AUI_MSW_HDRS} )
	STRING( REGEX REPLACE "[^/]*.h$" "" INSTALL_PATH ${INSTALL_HDR} )
	INSTALL( FILES ${INSTALL_HDR} DESTINATION ${INSTALL_PATH} )
ENDFOREACH( INSTALL_HDR ${AUI_COMMON_HDRS} ${AUI_MSW_HDRS} )
IF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )
	GET_TARGET_PROPERTY( LIBRARY_OUTPUT_NAME_DEBUG ${wxaui_TARGET} OUTPUT_NAME_DEBUG )
	IF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ELSE( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
		SET( DEBUG_DATABASE_FILE ${CMAKE_CURRENT_BINARY_DIR}/Debug/${LIBRARY_OUTPUT_NAME_DEBUG}.pdb )
	ENDIF( "${CMAKE_GENERATOR}" STREQUAL "NMake Makefiles" )
	INSTALL( FILES ${DEBUG_DATABASE_FILE} 
		DESTINATION lib 
		CONFIGURATIONS Debug )
ENDIF( MSVC AND WXWIDGETS_LIBRARY_TYPE STREQUAL SHARED )

IF( WIN32 )
	SET( WXWIDGETS_PLATFORM_DEPENDENT_LIBS "winmm.lib rpcrt4.lib comctl32.lib" )
ENDIF( WIN32 )

INSTALL( FILES ${CONFIGURED_SETUP_HDR} DESTINATION include/wx )
INSTALL( EXPORT wxWidgets-targets DESTINATION lib/cmake )

GET_DIRECTORY_PROPERTY( THIS_DEFS_A COMPILE_DEFINITIONS )
FOREACH( DEF ${THIS_DEFS_A} )
	SET( COMPILE_DEFS_SPACED "${COMPILE_DEFS_SPACED} ${DEF}" )
ENDFOREACH( DEF ${THIS_DEFS_A} )
FOREACH( DEF ${DEFINITIONS_DEBUG} )
	SET( COMPILE_DEFS_SPACED_DEBUG "${COMPILE_DEFS_SPACED_DEBUG} ${DEF}" )
ENDFOREACH( DEF ${DEFINITIONS_DEBUG} )

SET( CONFIG_FILE_CONTENTS 
	"\nGET_FILENAME_COMPONENT( SELF_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH )"
	"\nINCLUDE( \${SELF_DIR}/wxWidgets-targets.cmake )"
	"\nGET_FILENAME_COMPONENT( wxWidgets_INCLUDE_DIRS \"\${SELF_DIR}/../../include\" ABSOLUTE )"
	"\nSET( wxWidgets_LIBRARIES wxexpat ${wxaui_TARGET} ${wxxrc_TARGET} ${wxadv_TARGET} ${wxhtml_TARGET} ${wxgl_TARGET} ${wxxml_TARGET} ${wxbase_TARGET} ${wxcore_TARGET} ${WXWIDGETS_PLATFORM_DEPENDENT_LIBS} )"
	"\nGET_FILENAME_COMPONENT( wxWidgets_wxrc_EXECUTABLE \"\${SELF_DIR}/../../bin/wxrc${CMAKE_EXECUTABLE_SUFFIX}\" ABSOLUTE )"
	"\nSET( wxWidgets_DEFINITIONS ${COMPILE_DEFS_SPACED} )"
	"\nSET( wxWidgets_DEFINITIONS_DEBUG ${COMPILE_DEFS_SPACED_DEBUG} )"
	"\nSET( wxWidgets_FOUND TRUE )"
	"\n" )
SET( CONFIG_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/wxWidgets-config.cmake )
FILE( WRITE ${CONFIG_FILE_NAME} ${CONFIG_FILE_CONTENTS} )
INSTALL( FILES ${CONFIG_FILE_NAME} DESTINATION lib/cmake )

INCLUDE( files_resources.cmake )
IF( WIN32 )
	INSTALL( FILES ${ICON_RESOURCES} ${CUR_RESOURCES} ${BMP_RESOURCES} ${RC_RESOURCES} DESTINATION include/wx/msw )
ENDIF( WIN32 )

